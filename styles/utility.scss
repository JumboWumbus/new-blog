@import "~rfs/scss";

@import "/styles/colors.scss";

@mixin parentBoiler {
   position: relative;
   width: 100%;
   @include padding-left(2rem);
   @include padding-right(2rem);
   margin-left: auto;
   margin-right: auto;


}

@function remToPx($rem, $base: 16) {
   @return $rem * $base'px';
}


// #region color-contrast
/*--------------------------------------------------------------------------------------------------------------------------------------------------

MIXIN | color-contrast

Description: Compares background color to foreground color and changes foreground if it does not pass contrast test
Uses: Change text color depending on background color, pass contrast accessibility test.
Limitations: If dev uses two colors that don't pass contrast test, it will not default
*/

// @function strip-unit($value)
// @param {number with unit} $value
@function strip-unit($value) {
    @return ($value / ($value * 0 + 1));
}

// @function pow($base, $exponents)
// Helper: Raise a number the power of another number
// Adapted from: https://gist.github.com/hail2u/1964056
//
// @param {number} $base — The base number
// @param {number} $exponents — The exponent to which to raise $base
@function pow($base, $exponents) {
    $raised: 1;

    @for $i from 1 through $exponents {
        $raised: $raised * $base;
    }

    @return $raised;
}

// @function luminance($color)
// Helper: Calculate Luminance of a single color
// Adapted from: https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796
// White luminance is 1, Black luminance is 0
// To be used in other functions or mixins — creates non-standard CSS output:
// Usage: 
// .sample { luminance: luminance(#c00); }
// Output:
// .sample { luminance: 0.1283736922; }
//
@function luminance($color) {
    // Thanks voxpelli for a very concise implementation of luminance measure in sass
    // Adapted from: https://gist.github.com/voxpelli/6304812
    $rgba: red($color),
    green($color),
    blue($color);
    $rgba2: ();

    @for $i from 1 through 3 {
        $rgb: nth($rgba, $i);
        $rgb: $rgb / 255;
        $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2));
        $rgba2: append($rgba2, $rgb);
    }

    @return (.2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3))*100;
}

// @function contrast-ratio($fg, $bg)
// Helper: Calculate "readability" as defined by WCAG 2.1
// Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
// Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
// To be used in other functions or mixins — creates non-standard CSS output:
// Usage: 
// .sample { color-contrast: contrast-ratio(#c00, #fff); }
// Output:
// .sample { color-contrast: 5.89; }
//
@function contrast-ratio($fg, $bg) {
    $luminance1: luminance($fg)+0.05;
    $luminance2: luminance($bg)+0.05;
    $ratio: $luminance1 / $luminance2;

    @if $luminance2 >$luminance1 {
        $ratio: 1 / $ratio;
    }

    // Round to a hundreth because 6.96 should not pass a ratio of 7.0
    $ratio: round($ratio * 100) / 100;
    @return $ratio;
}

// @function validate-font-size($size)
// Helper: Depending on the unit recalculate a font size value into pixels if possible
// To be used in other functions or mixins — creates non-standard CSS output:
// Usage: 
// .sample { validate-font-size: validate-font-size(1em); }
// Output: 
// .sample { validate-font-size: 16; }
//
@function validate-font-size($size) {
    @if unit($size)=='em' or unit($size)=='rem' or unit($size)=='px' or unit($size)=='' {

        // Check if a flexible unit
        @if unit($size)=='em' or unit($size)=='rem' {
            // Need to convert to a pixel value. Let's not overcomplicate it with possible EM inheritence scale factors
            @return strip-unit($size * 16)
        }

        @if unit($size)=='px' {
            // We expect PX, so strip the value and return it
            @return strip-unit($size);
        }

        @if unit($size)=='' {
            @return $size;
        }
    }

    @else {
        @error 'validate-font-size(): An unexpected font size unit was supplied.';
    }
}

// @function get-ratio($level: 'AA', $size: 16, $bold: false)
// Helper: Determine the correct ratio value to use based on font-size and WCAG Level
// To be used in other functions or mixins — creates non-standard CSS output:
// Usage: 
// .sample { get-ratio: get-ratio('AAA', 19, true); }
// Output: 
// .sample { get-ratio: 4.5; }
//
@function get-ratio($level: 'AA', $size: 16, $bold: false) {
    // Default ratio
    $ratio: 4.5;

    @if $level =='AAA' {
        $ratio: 7;
    }

    // Make sure the size is valid. If the value is not EM, REM, or PX (preferred), we can't help
    $size: validate-font-size($size);

    // Check font size
    @if $size < 24 {

        // Small text, use defaults
        // But:
        @if $size >=19 and $bold ==true {

            // Special case: Small text but also bold
            @if $level =='AAA' {
                $ratio: 4.5;
            }

            @else {
                $ratio: 3;
            }
        }
    }

    @else {
        // Larger than 24
        $ratio: 3;

        @if $level =='AAA' {
            $ratio: 4.5;
        }
    }

    @return $ratio;
}

// @function light-or-dark($color)
// Helper: Use contrast against white or black to determine if a color is "light" or "dark"
// Adapted from: https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796
// To be used in other functions or mixins — creates non-standard CSS output:
// Usage: 
// .sample { light-or-dark: light-or-dark(#c00); }
// Output: 
// .sample { light-or-dark: "light"; }
//
@function light-or-dark($color) {
    $light-contrast: contrast-ratio($color, #fff);
    $dark-contrast: contrast-ratio($color, #000);

    @if $light-contrast >$dark-contrast {
        // Contrast against white is higher than against black, so, this is a dark color
        @return "dark";
    }

    @else {
        @return "light";
    }
}

// @function color-contrast($color)
// Helper: Returns black or white compared to a color, whichever produces the highest contrast
// Usage: 
// .sample {
//   background-color: #c00;
//   color: color-contrast(#c00);
// }
// Output:
// .sample {
//   background-color: #c00;
//   color: #fff;
// }
//
// Named for the forthcoming CSS Module 5 spec function color-contrast();
// See https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-contrast()
//
@function color-contrast($color) {
    $color-lod: light-or-dark($color);

    @if ($color-lod =="dark") {
        @return $white;
    }

    @else {
        @return $black;
    }
}

// @function a11y-color($fg, $bg, $level: 'AA', $size: 16, $bold: false)
// Goal: Return a color that passes for the chosen WCAG level without changing the Hue of the color
// Usage:
// .sample {
//   background-color: #000;
//   color: a11y-color(#c0c, #000);
// }
// Output:
// .sample {
//   background-color: #000;
//   color: #d200d2;
// }
//
@function a11y-color($fg, $bg, $level: 'AA', $size: 16, $bold: false) {
    // Helper: make sure the font size value is acceptable
    $font-size: validate-font-size($size);
    // Helper: With the level, font size, and bold boolean, return the proper target ratio. 3.0, 4.5, or 7.0 expected
    $ratio: get-ratio($level, $font-size, $bold);
    // Calculate the first contrast ratio of the given pair
    $original-contrast: contrast-ratio($fg, $bg);

    @if $original-contrast >=$ratio {
        // If we pass the ratio already, return the original color
        @return $fg;
    }

    @else {
        // Doesn't pass. Time to get to work
        // Should the color be lightened or darkened?
        $fg-lod: light-or-dark($fg);
        $bg-lod: light-or-dark($bg);

        // Set a "step" value to lighten or darken a color
        // Note: Higher percentage steps means faster compile time, but we might overstep the required threshold too far with something higher than 4%
        $step: 4%;

        // Run through some cases where we want to darken, or use a negative step value
        @if $fg-lod =='light' and $bg-lod =='light' {
            // Both are light colors, darken the fg
            $step: - $step;
        }

        @else if $fg-lod =='dark' and $bg-lod =='light' {
            // bg is light, fg is dark but does not pass, darken more
            $step: - $step;
        }

        // Keeping the rest of the logic here, but our default values do not change, so this logic is not needed
        //@else if $fg-lod == 'light' and $bg-lod == 'dark' {
        //  // bg is dark, fg is light but does not pass, lighten further
        //  $step: $step;
        //} @else if $fg-lod == 'dark' and $bg-lod == 'dark' {
        //  // Both are dark, so lighten the fg
        //  $step: $step;
        //}

        // The magic happens here
        // Loop through with a @while statement until the color combination passes our required ratio. Scale the color by our step value until the expression is false
        // This might loop 100 times or more depending on the colors
        @while contrast-ratio($fg, $bg) < $ratio {
            $sat-step: 0%;

            @if saturation($fg)>10 {
                $sat-step: $step;
            }

            $fg: scale-color($fg, $lightness: $step, $saturation: $sat-step);
        }

        @return $fg;
    }
}

// #endregion

// #region UnitConversion --------------------------------------------------------------------------------------------------------------------------
/*--------------------------------------------------------------------------------------------------------------------------------------------------

MIXIN | Unit-Conversion

Description: Convert between css units
Uses: Convert between css units

*/
/*____________________________________________________________________________

    Unit Conversion v.2.1.1
 ____________________________________________________________________________

   Function               Input units    
     
   Absolute length      
   px(input);             px, pt, pc, in, mm, cm, em, rem, number
   pt(input);             px, pt, pc, in, mm, cm, em, rem, number
   pc(input);             px, pt, pc, in, mm, cm, em, rem, number
   in(input);             px, pt, pc, in, mm, cm, em, rem, number
   mm(input);             px, pt, pc, in, mm, cm, em, rem, number
   cm(input);             px, pt, pc, in, mm, cm, em, rem, number

   Relative length 
   em(input);             px, pt, pc, in, mm, cm, em, rem, number
   rem(input);            px, pt, pc, in, mm, cm, em, rem, number
   ex(input);             ex, number  
   ch(input);             ch, number
   vw(input);             vw, number
   vh(input);             vh, number
   vmin(input);           vmin, number  
   vmax(input);           vmax, number

   Angle
   deg(input);            deg, rad, grad, turn, number
   rad(input);            deg, rad, grad, turn, number
   grad(input);           deg, rad, grad, turn, number
   turn(input);           deg, rad, grad, turn, number

   Resolution
   dpi(input);            dpi, dpcm, dppx, number
   dpcm(input);           dpi, dpcm, dppx, number
   dppx(input);           dpi, dpcm, dppx, number

   Time
   s(input);              s, ms, number
   ms(input);             s, ms, number

   Frequency
   hz(input);             hz, khz, number
   khz(input);            hz, khz, number
  
   String
   str(input);            anything not null

   Number, int and uint
   num(input);            px, pt, pc, in, mm, cm, em, rem, ex, ch,
                          vw, vh, vmin, vmax, deg, rad, grad, turn,
                          dpi, dpcm, dppx, s, ms, hz, khz, number
   int(input);            as number
   uint(input);           as number

   Aliases
   string(input);
   number(input);


____________________________________________________________________________ // Base font size in pixel for converting em and rem to absolute lengths.
*/

$base-font-size: 16px !default;


// Absolute lengths
@function px($input) {
    @return to-unit(px, $input);
}

@function pt($input) {
    @return to-unit(pt, $input);
}

@function pc($input) {
    @return to-unit(pc, $input);
}

@function in($input) {
    @return to-unit(in, $input);
}

@function mm($input) {
    @return to-unit(mm, $input);
}

@function cm($input) {
    @return to-unit(cm, $input);
}

@function q($input) {
    @return to-unit(q, $input);
}

// Angles
@function deg($input) {
    @return to-unit(deg, $input);
}

@function rad($input) {
    @return to-unit(rad, $input);
}

@function grad($input) {
    @return to-unit(grad, $input);
}

@function turn($input) {
    @return to-unit(turn, $input);
}

// Resolution
@function dpi($input) {
    @return to-unit(dpi, $input);
}

@function dpcm($input) {
    @return to-unit(dpcm, $input);
}

@function dppx($input) {
    @return to-unit(dppx, $input);
}

// Time
@function ms($input) {
    @return to-unit(ms, $input);
}

@function s($input) {
    @return to-unit(s, $input);
}

// Frequencies
@function hz($input) {
    @return to-unit(hz, $input);
}

@function khz($input) {
    @return to-unit(khz, $input);
}

// Relative lengths
@function em($input...) {
    $em: to-unit(em, nth($input, 1));

    // Adjust for compounds (visual size)
    @if length($input)>1 {
        @for $i from 2 through length($input) {
            $em: $em / num(em(nth($input, $i)));
        }
    }

    @return $em;
}

@function rem($input) {
    @return to-unit(rem, num(em($input)));
}

// Inconvertible relative lengths – depends on font 
@function ex($input) {
    @return to-unit(ex, $input);
}

@function ch($input) {
    @return to-unit(ch, $input);
}

// Viewport
@function vw($input) {
    @return to-unit(vw, $input);
}

@function vh($input) {
    @return to-unit(vh, $input);
}

@function vmin($input) {
    @return to-unit(vmin, $input);
}

@function vmax($input) {
    @return to-unit(vmax, $input);
}

// Strings and numbers
@function str($input) {
    @return #{$input};
}

@function num($input) {
    @if type-of($input) !=number {
        @error 'Could not convert `#{$input}` - must be `type-of number`';
        @return null;
    }

    @return $input/($input*0+1);
}

@function int($input) {
    $num: num($input);
    @return if($num<0, ceil($num), floor($num));
}

@function uint($input) {
    @return abs(int($input));
}

// Aliases
@function string($input) {
    @return str($input);
}

@function number($input) {
    @return num($input);
}


// Conversion function
@function to-unit($unit, $input) {
    // Test against valid CSS units
    $to-unit: map-get((px: 0px, pt: 0pt, pc: 0pc, in: 0in, mm: 0mm, cm: 0cm, q: 0q, // absolute length
            em: 0em, rem: 0rem, ch: 0ch, ex: 0ex, // relative length - font based
            vw: 0vw, vh: 0vh, vmin: 0vmin, vmax: 0vmax, // relative length - viewport based
            deg: 0deg, turn: 0turn, grad: 0grad, rad: 0rad, // angle
            s: 0s, ms: 0ms, // time
            hz: 0Hz, khz: 0kHz, // frequency
            dpi: 0dpi, dpcm: 0dpcm, dppx: 0dppx, // resolution
            pct: 0%, percent: 0%, num: 0, number: 0 // percent or number  
        ), $unit);

    // Error handling – wrong $unit 
    // Incomparable units are caught in convertion 
    @if not $to-unit {
        @error 'Could not convert to `#{$unit}` – must be a valid CSS unit';
        @return null;
    }

    // Number/incomparable conversion
    @if index(num number ex ch vw vh vmin vmax, $unit) {
        $value: num($input);
    }

    // EM/REM convertion using px as base
    @if index(em rem, unit($input)) {
        $input: 0px+num($input) * $base-font-size/1px;
    }

    @if index(em rem, $unit) and not unitless($input) {
        $input: 0px+$input;
        $input: num($input) * 1px/$base-font-size;
    }


    // Bug fix – resolution units seems to be flipped   
    @if index(dpi dpcm dppx, $unit) {
        $units: (dppx: 0dppx, dpcm: 0dpcm, dpi: 0dpi);
        $input-unit: map-get($units, unit($input));
        $input: if(1dppx < 95dpi, num($input-unit + (num($input) + $to-unit)), $input);
    }

    // Convert 
    @return $to-unit +$input;
}

//  Convert number to ratio
//  ratio(1.7777778) =>   16/9 
@function ratio($x, $y: null) {
    @if not $y {
        $n: $x;
        $y: 1;

        @while $y < 10 {
            $x: $n * 10 - ((10 - $y) * $n);

            @if $x ==round($x) {
                @return #{$x}/#{$y};
            }

            @else {
                $y: $y +1;
            }
        }

        $x: round($n * 1000000);
        $y: 1000000;

        @while $x % 10==0 {
            $x: $x/10;
            $y: $y/10;
        }

        @while $x % 5==0 {
            $x: $x/5;
            $y: $y/5;
        }

        @while $x % 2==0 {
            $x: $x/2;
            $y: $y/2;
        }

        @return #{$x}/#{$y};
    }

    @else if $x ==round($x) and $y ==round($y) {
        @return #{$x}/#{$y};
    }

    @warn 'X and Y must be integers';
    @return false;
}




/* #{ ratio(1.7777778) } */


// #endregion


/*--------------------------------------------------------------------------------------------------------------------------------------------------

MIXIN | name-here

Description: 
Uses: 

*/


/*--------------------------------------------------------------------------------------------------------------------------------------------------

MIXIN | Unit-Conversion

Description: Convert between css units
Uses: Convert between css units

*/
/*____________________________________________________________________________

    Unit Conversion v.2.1.1
 ____________________________________________________________________________

   Function               Input units    
     
   Absolute length      
   px(input);             px, pt, pc, in, mm, cm, em, rem, number
   pt(input);             px, pt, pc, in, mm, cm, em, rem, number
   pc(input);             px, pt, pc, in, mm, cm, em, rem, number
   in(input);             px, pt, pc, in, mm, cm, em, rem, number
   mm(input);             px, pt, pc, in, mm, cm, em, rem, number
   cm(input);             px, pt, pc, in, mm, cm, em, rem, number

   Relative length 
   em(input);             px, pt, pc, in, mm, cm, em, rem, number
   rem(input);            px, pt, pc, in, mm, cm, em, rem, number
   ex(input);             ex, number  
   ch(input);             ch, number
   vw(input);             vw, number
   vh(input);             vh, number
   vmin(input);           vmin, number  
   vmax(input);           vmax, number

   Angle
   deg(input);            deg, rad, grad, turn, number
   rad(input);            deg, rad, grad, turn, number
   grad(input);           deg, rad, grad, turn, number
   turn(input);           deg, rad, grad, turn, number

   Resolution
   dpi(input);            dpi, dpcm, dppx, number
   dpcm(input);           dpi, dpcm, dppx, number
   dppx(input);           dpi, dpcm, dppx, number

   Time
   s(input);              s, ms, number
   ms(input);             s, ms, number

   Frequency
   hz(input);             hz, khz, number
   khz(input);            hz, khz, number
  
   String
   str(input);            anything not null

   Number, int and uint
   num(input);            px, pt, pc, in, mm, cm, em, rem, ex, ch,
                          vw, vh, vmin, vmax, deg, rad, grad, turn,
                          dpi, dpcm, dppx, s, ms, hz, khz, number
   int(input);            as number
   uint(input);           as number

   Aliases
   string(input);
   number(input);


____________________________________________________________________________ // Base font size in pixel for converting em and rem to absolute lengths.
*/

$base-font-size: 16px !default;


// Absolute lengths
@function px($input) {
   @return to-unit(px, $input);
}

@function pt($input) {
   @return to-unit(pt, $input);
}

@function pc($input) {
   @return to-unit(pc, $input);
}

@function in($input) {
   @return to-unit(in, $input);
}

@function mm($input) {
   @return to-unit(mm, $input);
}

@function cm($input) {
   @return to-unit(cm, $input);
}

@function q($input) {
   @return to-unit(q, $input);
}

// Angles
@function deg($input) {
   @return to-unit(deg, $input);
}

@function rad($input) {
   @return to-unit(rad, $input);
}

@function grad($input) {
   @return to-unit(grad, $input);
}

@function turn($input) {
   @return to-unit(turn, $input);
}

// Resolution
@function dpi($input) {
   @return to-unit(dpi, $input);
}

@function dpcm($input) {
   @return to-unit(dpcm, $input);
}

@function dppx($input) {
   @return to-unit(dppx, $input);
}

// Time
@function ms($input) {
   @return to-unit(ms, $input);
}

@function s($input) {
   @return to-unit(s, $input);
}

// Frequencies
@function hz($input) {
   @return to-unit(hz, $input);
}

@function khz($input) {
   @return to-unit(khz, $input);
}

// Relative lengths
@function em($input...) {
   $em: to-unit(em, nth($input, 1));

   // Adjust for compounds (visual size)
   @if length($input)>1 {
      @for $i from 2 through length($input) {
         $em: $em / num(em(nth($input, $i)));
      }
   }

   @return $em;
}

@function rem($input) {
   @return to-unit(rem, num(em($input)));
}

// Inconvertible relative lengths – depends on font 
@function ex($input) {
   @return to-unit(ex, $input);
}

@function ch($input) {
   @return to-unit(ch, $input);
}

// Viewport
@function vw($input) {
   @return to-unit(vw, $input);
}

@function vh($input) {
   @return to-unit(vh, $input);
}

@function vmin($input) {
   @return to-unit(vmin, $input);
}

@function vmax($input) {
   @return to-unit(vmax, $input);
}

// Strings and numbers
@function str($input) {
   @return #{$input};
}

@function num($input) {
   @if type-of($input) !=number {
      @error 'Could not convert `#{$input}` - must be `type-of number`';
      @return null;
   }

   @return $input/($input*0+1);
}

@function int($input) {
   $num: num($input);
   @return if($num<0, ceil($num), floor($num));
}

@function uint($input) {
   @return abs(int($input));
}

// Aliases
@function string($input) {
   @return str($input);
}

@function number($input) {
   @return num($input);
}


// Conversion function
@function to-unit($unit, $input) {
   // Test against valid CSS units
   $to-unit: map-get((px: 0px, pt: 0pt, pc: 0pc, in: 0in, mm: 0mm, cm: 0cm, q: 0q, // absolute length
         em: 0em, rem: 0rem, ch: 0ch, ex: 0ex, // relative length - font based
         vw: 0vw, vh: 0vh, vmin: 0vmin, vmax: 0vmax, // relative length - viewport based
         deg: 0deg, turn: 0turn, grad: 0grad, rad: 0rad, // angle
         s: 0s, ms: 0ms, // time
         hz: 0Hz, khz: 0kHz, // frequency
         dpi: 0dpi, dpcm: 0dpcm, dppx: 0dppx, // resolution
         pct: 0%, percent: 0%, num: 0, number: 0 // percent or number  
      ), $unit);

   // Error handling – wrong $unit 
   // Incomparable units are caught in convertion 
   @if not $to-unit {
      @error 'Could not convert to `#{$unit}` – must be a valid CSS unit';
      @return null;
   }

   // Number/incomparable conversion
   @if index(num number ex ch vw vh vmin vmax, $unit) {
      $value: num($input);
   }

   // EM/REM convertion using px as base
   @if index(em rem, unit($input)) {
      $input: 0px+num($input) * $base-font-size/1px;
   }

   @if index(em rem, $unit) and not unitless($input) {
      $input: 0px+$input;
      $input: num($input) * 1px/$base-font-size;
   }


   // Bug fix – resolution units seems to be flipped   
   @if index(dpi dpcm dppx, $unit) {
      $units: (dppx: 0dppx, dpcm: 0dpcm, dpi: 0dpi);
      $input-unit: map-get($units, unit($input));
      $input: if(1dppx < 95dpi, num($input-unit + (num($input) + $to-unit)), $input);
   }

   // Convert 
   @return $to-unit +$input;
}

//  Convert number to ratio
//  ratio(1.7777778) =>   16/9 
@function ratio($x, $y: null) {
   @if not $y {
      $n: $x;
      $y: 1;

      @while $y < 10 {
         $x: $n * 10 - ((10 - $y) * $n);

         @if $x ==round($x) {
            @return #{$x}/#{$y};
         }

         @else {
            $y: $y +1;
         }
      }

      $x: round($n * 1000000);
      $y: 1000000;

      @while $x % 10==0 {
         $x: $x/10;
         $y: $y/10;
      }

      @while $x % 5==0 {
         $x: $x/5;
         $y: $y/5;
      }

      @while $x % 2==0 {
         $x: $x/2;
         $y: $y/2;
      }

      @return #{$x}/#{$y};
   }

   @else if $x ==round($x) and $y ==round($y) {
      @return #{$x}/#{$y};
   }

   @warn 'X and Y must be integers';
   @return false;
}




/* #{ ratio(1.7777778) } */


// #endregion